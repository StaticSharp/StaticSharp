<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Text.Json" #>
<#@ assembly name="System.Net.Http" #>
<#@ assembly name="System.Memory" #>
<#@ assembly name="netstandard" #>
<#@ import namespace="System.Runtime.CompilerServices" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System.Text.Json" #>
<#@ import namespace="System.Net.Http" #>
<#@ output extension=".cs" #>
<#= Task.Run(() => Generator.GenerateEnumFields()).Result#>
<#+
public struct MetaElement {
    //public string id;
    public string name;
    public string codepoint;
    private static Regex KebabToPascalCaseRegex = new Regex("(?:-|^)[a-zA-Z0-9]", RegexOptions.Compiled);
    public string PascalName {
        get {
            return KebabToPascalCaseRegex.Replace(name, x=>char.ToUpper(x.Value.Last()).ToString());
        }
    }
    public string EnumField => $"{PascalName} = 0x{codepoint},";
}

static class Generator{

    public static string AbsolutePath(string subPath = "", [CallerFilePath] string callerFilePath = "") =>
            Path.Combine(Path.GetDirectoryName(callerFilePath), subPath);
            

    public static async Task<string> GenerateEnumFields() {

        HttpClient client = new HttpClient();
        var metaResponse = await client.GetAsync("https://raw.githubusercontent.com/Templarian/MaterialDesign/master/meta.json");
        var metaJson = await metaResponse.Content.ReadAsStringAsync();
        var meta = JsonSerializer.Deserialize<MetaElement[]>(metaJson,new JsonSerializerOptions() { IncludeFields = true});

        var result = new StringBuilder();

        result.AppendLine("namespace StaticSharpGears.Public;");

        result.AppendLine("public static class MaterialDesignIconsStatic {");

        result.AppendLine("\tpublic static Uri GetSvgUri(this MaterialDesignIcons icon) {");
        result.AppendLine("\t\treturn new Uri($\"https://raw.githubusercontent.com/Templarian/MaterialDesign/master/svg/{icon.GetName()}.svg\");");
        result.AppendLine("\t}");

        result.AppendLine("\tpublic static string GetName(this MaterialDesignIcons icon) {");
        result.AppendLine("\t\tswitch ((int)icon) {");
        foreach (var i in meta)
            result.AppendLine($"\t\t\tcase 0x{i.codepoint} : return \"{i.name}\";");
        result.AppendLine("\t\t}");
        result.AppendLine("\t\treturn \"\";");
        result.AppendLine("\t}");
        result.AppendLine("}");


        result.AppendLine("public enum MaterialDesignIcons{");
        foreach (var i in meta)
            result.Append("\t").AppendLine(i.EnumField);
        result.AppendLine("}");

        return result.ToString();
    }
}
#>




